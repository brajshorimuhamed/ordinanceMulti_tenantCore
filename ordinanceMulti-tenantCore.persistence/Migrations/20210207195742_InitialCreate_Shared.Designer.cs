// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ordinanceMulti_tenantCore.persistence;

namespace ordinanceMulti_tenantCore.persistence.Migrations
{
    [DbContext(typeof(Ordinance_SharedDbContext))]
    [Migration("20210207195742_InitialCreate_Shared")]
    partial class InitialCreate_Shared
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new { Id = 1, ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier", ClaimValue = "9A6EA564-7238-5CD6-BD64-DA142DD43FF5", UserId = "9A6EA564-7238-5CD6-BD64-DA142DD43FF5" },
                        new { Id = 2, ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress", ClaimValue = "muhamedbrajshori@hotmail.com", UserId = "9A6EA564-7238-5CD6-BD64-DA142DD43FF5" },
                        new { Id = 3, ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role", ClaimValue = "Super Admin", UserId = "9A6EA564-7238-5CD6-BD64-DA142DD43FF5" },
                        new { Id = 4, ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/mobilephone", ClaimValue = "+38344224106", UserId = "9A6EA564-7238-5CD6-BD64-DA142DD43FF5" },
                        new { Id = 5, ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname", ClaimValue = "Muhamed", UserId = "9A6EA564-7238-5CD6-BD64-DA142DD43FF5" },
                        new { Id = 6, ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname", ClaimValue = "Brajshori", UserId = "9A6EA564-7238-5CD6-BD64-DA142DD43FF5" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "9A6EA564-7238-5CD6-BD64-DA142DD43FF5", RoleId = "12BC2784-B550-5876-98A8-74A621C6E6B8" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ordinanceMulti_tenantCore.domain.Entities.Ordinance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Ordinance_Address")
                        .IsRequired()
                        .HasColumnName("Ordinance_Address");

                    b.Property<string>("Ordinance_Name")
                        .IsRequired()
                        .HasColumnName("Ordinance_Name");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnName("Sector");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Ordinances");
                });

            modelBuilder.Entity("ordinanceMulti_tenantCore.domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "12BC2784-B550-5876-98A8-74A621C6E6B8", ConcurrencyStamp = "87e60bd2-8d9f-4d59-8516-03b96232fd83", Name = "SuperAdmin", NormalizedName = "SuperAdmin" },
                        new { Id = "4FFB4345-CA1C-5050-AB1F-3AE2BE5E46D5", ConcurrencyStamp = "09fb2f6a-f650-48ae-b51d-35c8fb387466", Name = "Tenant", NormalizedName = "Tenant" }
                    );
                });

            modelBuilder.Entity("ordinanceMulti_tenantCore.domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int?>("OrdinanceId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrdinanceId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "9A6EA564-7238-5CD6-BD64-DA142DD43FF5", AccessFailedCount = 0, ConcurrencyStamp = "e0b34421-f1bc-4f56-81e5-a42db1df289a", Email = "muhamedbrajshori@hotmail.com", EmailConfirmed = true, FirstName = "Muhamed", LastName = "Brajshori", LockoutEnabled = false, NormalizedEmail = "muhamedbrajshori@hotmail.com", NormalizedUserName = "muhamedbrajshori@hotmail.com", PasswordHash = "AQAAAAEAACcQAAAAEFtRrS0Z8LQ4I42c4/tIIXgK/DFDMkjCjispN5MutJmEs8h9X+1IvZePay1bHqkeLQ==", PhoneNumber = "+38344224106", PhoneNumberConfirmed = true, SecurityStamp = "18912e94-f6f2-4627-acd8-9bdecd4602ce", TwoFactorEnabled = false, UserName = "muhamedbrajshori@hotmail.com" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ordinanceMulti_tenantCore.domain.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ordinanceMulti_tenantCore.domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ordinanceMulti_tenantCore.domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ordinanceMulti_tenantCore.domain.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ordinanceMulti_tenantCore.domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ordinanceMulti_tenantCore.domain.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ordinanceMulti_tenantCore.domain.Entities.User", b =>
                {
                    b.HasOne("ordinanceMulti_tenantCore.domain.Entities.Ordinance")
                        .WithMany("Users")
                        .HasForeignKey("OrdinanceId");
                });
#pragma warning restore 612, 618
        }
    }
}
